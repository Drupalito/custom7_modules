<?php

/**
 * @file
 * fullscreen module
 *
 * @ingroup fullscreen
 */

/**
 * Implements hook_theme_registry_alter().
 */
function fullscreen_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'fullscreen');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implements hook_theme().
 *
 * @see hook_theme()
 */
function fullscreen_theme($existing, $type, $theme, $path) {
  return array(
    'fullscreen' => array(
      'path' => $path . '/templates',
      'template' => 'fullscreen',
      'variables' => array(
        'params' => array()
      ),
    )
  );
}

/**
 * Implements hook_preprocess_block().
 *
 * @see hook_preprocess()
 */
function fullscreen_preprocess_block(&$variables, $hook) {
  if (in_array($variables['block_html_id'], array('block-views-fullscreen-block', 'block-fullscreen-block-astarter-fullscreen'))) {
    unset($variables['classes_array']);
    $variables['classes_array'][] = 'page-fullscreen';
    $variables['classes_array'][] = 'fullscreen';
    array_unshift($variables['theme_hook_suggestions'], 'block__fullscreen');
  }
}

/**
 * Implements hook_preprocess_region().
 *
 * @see hook_preprocess()
 */
function fullscreen_preprocess_region(&$variables, $hook) {
  if ($variables['region'] == 'full_screen') {

    $path_module = drupal_get_path('module', 'fullscreen');

    array_unshift($variables['theme_hook_suggestions'], 'region__no_wrapper');

    drupal_add_css($path_module . '/css/theme.fullscreen.css', array(
      'group'      => CSS_DEFAULT,
      'every_page' => TRUE
    ));

    // drupal_add_js($path_module . '/js/fullscreen-video.js');
  }
}

/**
 * Implements hook_block_info().
 *
 * @see hook_block_info()
 */
function fullscreen_block_info() {
  $blocks['block_astarter_fullscreen'] = array(
    'info'       => t('[custom] Fullscreen block top page'),
    'cache'      => DRUPAL_NO_CACHE,
    'weight'     => 0,
    'status'     => TRUE,
    'mb_enabled' => TRUE, // Enable MultiBlock integration.
    // 'visibility' => BLOCK_VISIBILITY_LISTED,
    // 'region'     => '',
    // 'pages'      => '',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @see hook_block_view()
 */
function fullscreen_block_view($delta = '', $edit = NULL) {
  $block = array();
  switch ($delta) {
    case 'block_astarter_fullscreen':

      // Check if multiblock module is in use.
      $prefix = '';
      if ($edit && isset($edit['multiblock_delta']['#value'])) {
        $prefix = '_' . $edit['multiblock_delta']['#value'];
      }

      $image_file = file_load(variable_get('astarter' . $prefix . '_fullscreen_image', ''));
      $image_path = NULL;
      $image = NULL;
      if (isset($image_file->uri)) {
        $image_path = $image_file->uri;
        $image = theme('image_style', array(
          'style_name' => 'large',
          'path' => $image_path,
          'alt' => '',
          'attributes' => array(
            'class' => 'fullscreen-image'
          ),
          'title' => NULL,
        ));
      }

      $params = array();
      $out_title = variable_get('astarter' . $prefix . '_fullscreen_title', NULL);
      $params['title'] = str_replace('|', '<br/>', $out_title);
      $out_excerpt = variable_get('astarter' . $prefix . '_fullscreen_excerpt', NULL);
      $params['excerpt'] = str_replace('|', '<br/>', $out_excerpt);
      $params['image'] = $image;
      $params['video'] = variable_get('astarter' . $prefix . '_fullscreen_video', NULL);
      $params['video_poster'] = isset($image_path) ? file_create_url($image_path) : NULL;

      $fullscreen_cta_label = variable_get('astarter' . $prefix . '_fullscreen_link_label', NULL);
      if (isset($fullscreen_cta_label)) {
        $params['cta'] = array(
          '#theme' => 'cta_button',
          '#items' => array(
            'cta_link_label' => $fullscreen_cta_label,
            'cta_link_onlypdf' => variable_get('astarter' . $prefix . '_fullscreen_onlypdf', NULL),
            'cta_link_url' => variable_get('astarter' . $prefix . '_fullscreen_link_url', NULL),
            'cta_link_target' => variable_get('astarter' . $prefix . '_fullscreen_link_target', NULL),
            'cta_link_pdf' => variable_get('astarter' . $prefix . '_fullscreen_filecta', NULL),
          ),
          '#attached' => array(
            'js' => array(
              drupal_get_path('module', 'field_cta') . '/js/cta.js',
            ),
          ),
        );
      }

      $block['content'] = theme('fullscreen', $params);
      break;
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 *
 * @param $delta
 *   Unique ID of the block within the context of $module.
 * @see hook_block_configure()
 */
function fullscreen_block_configure($delta = '', $edit = NULL) {
  $form = array();

  switch ($delta) {
    case 'block_astarter_fullscreen':

      // If MultiBlock is installed, pass the delta as a hidden value so we can
      // retrieve the correct variable from the database in hook_block_save()
      // implementation.
      $prefix = '';
      if ($edit && isset($edit['multiblock_delta'])) {
        $form['multiblock_delta'] = array(
          '#type' => 'value',
          '#value' => $edit['multiblock_delta']['#value'],
        );
        $prefix = '_' . $edit['multiblock_delta']['#value'];
      }

      // Create the form using Forms API.
      $form['fullscreen_media'] = array(
        '#type'          => 'fieldset',
        '#title'         => t('Media'),
        '#weight'        => 0,
      );
      $form['fullscreen_media']['astarter_fullscreen_image'] = array(
        '#name' => 'heading',
        '#type' => 'media',
        '#title' => t('Image heading'),
        '#description' => t('Allowed extensions: png jpg jpeg'),
        '#upload_location' => 'public://heading/',
        '#upload_validators' => array(
        'file_validate_extensions' => array('png gif jpg jpeg'),
        ),
        '#default_value' => variable_get('astarter' . $prefix . '_fullscreen_image', ''),
      );

      $form['fullscreen_media']['astarter_fullscreen_video'] = array(
        '#title' => t('Video URL'),
        '#type' => 'textfield',
        '#default_value' => variable_get('astarter' . $prefix . '_fullscreen_video', ''),
      );
      $form['fullscreen_media']['astarter_fullscreen_title'] = array(
        '#title' => t('Title'),
        '#type' => 'textfield',
        '#default_value' => variable_get('astarter' . $prefix . '_fullscreen_title', ''),
      );
      $form['fullscreen_media']['astarter_fullscreen_excerpt'] = array(
        '#title' => t('Excerpt'),
        '#type' => 'textarea',
        '#default_value' => variable_get('astarter' . $prefix . '_fullscreen_excerpt', ''),
      );
      $form['fullscreen_media']['fullscreen_cta'] = array(
        '#type' => 'field_cta_id',
        '#default_value' => array(
          'link_label' => variable_get('astarter' . $prefix . '_fullscreen_link_label'),
          'link_onlypdf' => variable_get('astarter' . $prefix . '_fullscreen_onlypdf'),
          'link_target' => variable_get('astarter' . $prefix . '_fullscreen_link_target'),
          'link_url' => variable_get('astarter' . $prefix . '_fullscreen_link_url'),
          'link_pdf' => variable_get('astarter' . $prefix . '_fullscreen_filecta'),
        ),
      );

      $form['add_frame'] = array(
        '#type' => 'button',
        '#value' => t('Add a frame'),
        '#href' => '',
        '#ajax' => array(
          'callback' => 'custom_registration_ajax_add_frame',
          'wrapper' => 'frames',
         ),
       );

      break;
  }
  return $form;
}

function custom_registration_ajax_add_frame($form, $form_state) {
  return $form['frames'];
}


/**
 * Implements hook_block_save().
 */
function fullscreen_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'block_astarter_fullscreen':

      $prefix = ($edit['module'] == 'multiblock') ? '_' . $edit['delta'] : '';

      variable_set('astarter' . $prefix . '_fullscreen_title', $edit['astarter_fullscreen_title']);
      variable_set('astarter' . $prefix . '_fullscreen_excerpt', $edit['astarter_fullscreen_excerpt']);
      variable_set('astarter' . $prefix . '_fullscreen_video', $edit['astarter_fullscreen_video']);

      variable_set('astarter' . $prefix . '_fullscreen_link_label', $edit['fullscreen_cta']['field_cta_id']['cta_link_label']);

      variable_set('astarter' . $prefix . '_fullscreen_onlypdf', $edit['fullscreen_cta']['field_cta_id']["columns"]['cta_link_onlypdf']);

      variable_set('astarter' . $prefix . '_fullscreen_link_target', $edit['fullscreen_cta']['field_cta_id']["columns"]["container_display"]['cta_link_target']);
      variable_set('astarter' . $prefix . '_fullscreen_link_url', $edit['fullscreen_cta']['field_cta_id']["columns"]["container_display"]['cta_link_url']);

      $block = block_load('fullscreen', $delta);

      // Get the previous fid of the file
      $prev_fid = variable_get('astarter' . $prefix . '_fullscreen_filecta', 0);

      // Has the file a new value?
      if ($prev_fid != $edit['fullscreen_cta']['field_cta_id']['columns']['container_filecta']['cta_link_pdf']) {

        // File is being replaced or deleted?
        if ($prev_fid > 0) {
          // Delete the previous file
          $file = file_load($prev_fid);

          // Remove the reference to this file in the file_usage table
          file_usage_delete($file, 'fullscreen', 'block', $block->bid);

          // Remove the file itself
          file_delete($file);
        }
      }
      variable_set('astarter' . $prefix . '_fullscreen_filecta', $edit['fullscreen_cta']['field_cta_id']['columns']['container_filecta']['cta_link_pdf']);
      if ($edit['fullscreen_cta']['field_cta_id']['columns']['container_filecta']['cta_link_pdf'] > 0 && $edit['fullscreen_cta']['field_cta_id']['columns']['container_filecta']['cta_link_pdf'] != $prev_fid) {
        // Saving the file, setting it to a permanent state, setting a FID variable
        $file = file_load($edit['fullscreen_cta']['field_cta_id']['columns']['container_filecta']['cta_link_pdf']);
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
        file_usage_add($file, 'fullscreen', 'block', $block->bid);
      }

      // Get the previous fid of the file
      $prev_fid = variable_get('astarter' . $prefix . '_fullscreen_image', 0);

      // Has the file a new value?
      if ($prev_fid != $edit['astarter_fullscreen_image']) {

        // File is being replaced or deleted?
        if ($prev_fid > 0) {
          // Delete the previous file
          $file = file_load($prev_fid);

          // Remove the reference to this file in the file_usage table
          file_usage_delete($file, 'fullscreen', 'block', $block->bid);

          // Remove the file itself
          file_delete($file);
        }
      }
      variable_set('astarter' . $prefix . '_fullscreen_image', $edit['astarter_fullscreen_image']);
      if ($edit['astarter_fullscreen_image'] > 0 && $edit['astarter_fullscreen_image'] != $prev_fid) {
        // Saving the file, setting it to a permanent state, setting a FID variable
        $file = file_load($edit['astarter_fullscreen_image']);
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
        file_usage_add($file, 'fullscreen', 'block', $block->bid);
      }

      break;
  }
}
